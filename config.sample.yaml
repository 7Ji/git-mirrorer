# proxy: http://your_http_proxy # Only needed if you want to use proxy
# proxy_after: 3 # If proxy is set, only after this amount of failed tries, will proxy be used, the retry counts are reset between each repo
# dir_repos: repos # Set the repos folder
# dir_archives: archives # Set the archives folder
# dir_checkouts: checkouts # Set the checkout folder
wanted: # Defines global wanted objects, format is the same as when they're defined for repos
  empty: # This list of wanted objects will be added to repo that has no wanted objects defined
         # Note that if you set this list to empty, git-mirrorer will automatically add a wanted HEAD to it.
         # It's not recommended to add repo-specific things here, like specific commit
    - HEAD:
        archive: yes
        checkout: yes
  always: # This list of wanted objects will be added to all repos
          # It's not recommended to add repo-specific things here, like specific commit
    - all_branches:
        archive: yes
        checkout: yes
    - all_tags:
        archive: yes
        checkout: yes
archive:
  # Whether to append a prefix to all entries in archive, by default this is turned off so everything will be directly in the archive root.
  # However, the default behaviour might confuse some build systems if they're used to Github's archive creation method which always includes prefix.
  # Turn this on if you want similar behaviour to github's archive. 
  # The prefix will be '[repo name]-[commit hash]/'
  github_like_prefix: no 

  suffix: .tar # Defines the archive suffix, this does not affect the actual format

  # A combination of executable + argument to pipe the archive to it to get the actual output
  # If set to / kept empty, the archive will be directly written
  # If set to non-empty value, git-mirrorer will pipe the archive info it, 
  # then pipe its output to the on-disk archive file
  # The command and arguments are seperated on white space
  # This is very simple and git-mirrorer does not do any escaping on it
  pipe_through: '' 
  
  # It's also possible to define the pipe with each argument as a member of the list seperately, 
  # if you have some argument that contains whitespace and it's hard to escape them
  # pipe_through:  
  #   - zstd
  #   - 22vT0
cleanup:
  repos: no
  archives: no
  checkouts: no
  links: yes
repos:
  # A repo can be simply declared with its url
  - https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
  # Or a list of wanted objects can be declared
  - https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git:
      wanted:
        # A special wanted object all_tags, git-mirrorer will guarantee all commits pointed by all tags are robust
        - all_tags
        # A special wanted object all_branches, git-mirrorer will guarantee all commits pointed by all branches are robust
        - all_branches: # A wanted object can also be set with advanced options
            # If archive is enabled, git-mirrorer will create archive for the commit under dir_archives
            archive: yes
            # If checkout is enabled, git-mirroer will create checkout for the commit under dir_checkouts
            # Special note: the checkout won't contain .git work folder, the main purpose is to create temporary build folders.
            #               If you do want .git involved, you can just clone the mirrored repos instead.
            checkout: yes
            # Specially, for all_branches and all_tags, archive and checkout are not created for themselves, but rather for 
            # the virtual wanted branches and wanted tags appened to the wanted objects list
        # A wanted object with name [vV][0-9] is automatically identified as a tag
        - v6.1
        # You can/need to set type for names that git-mirrorer can't guess their types
        - linux-6.4.y:
            type: branch
        # You can also set HEAD explicitly, note for a repo without any wanted objects, HEAD is automatically added,
        # but if there is any wanted object, HEAD will not be checked unless you specify it explicitly
        - HEAD
  # The powerfulness of git-mirrorer shines when you're mirroring a repo with submodules
  # git-mirrorer will look into the commit tree of a wanted object, and if there is .gitmodules, it will also mirror
  # those submodule repos. The submodule repos are virtually appended to the repos list and with at least the submodule
  # commit as their wanted object
  - https://github.com/7Ji/amlogic-s9xxx-archlinuxarm:
      wanted:
        - 20230502:
            type: tag
            # For a repo with submodules, the archives and checkouts created will include those submodules
            # You can thus use git-mirrorer as a tool to create source tarboll for such repos
            archive: yes
            checkout: yes